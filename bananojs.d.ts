/** Declaration file generated by dts-gen */
/** This really sucks, please add things from the documentation to here */

declare module '@bananocoin/bananojs' {

    export const BANANO_PREFIX: string;

    export const NANO_PREFIX: string;

    export const PREFIXES: string[];

    export function camoBananoGetAccountsPending(seed: any, seedIx: any, fromAccount: any, sharedSeedIx: any, count: any): any;

    export function camoBananoReceive(toPrivateKey: any, fromPublicKey: any): any;

    export function camoBananoSend(fundingPrivateKey: any, fromCamoPrivateKey: any, toCamoPublicKey: any, amountBananos: any): any;

    export function camoBananoSendWithdrawalFromSeed(seed: any, seedIx: any, toAccount: any, amountBananos: any): any;

    export function camoNanoGetAccountsPending(seed: any, seedIx: any, fromAccount: any, sharedSeedIx: any, count: any): any;

    export function camoNanoReceive(toPrivateKey: any, fromPublicKey: any): any;

    export function camoNanoSend(fundingPrivateKey: any, fromCamoPrivateKey: any, toCamoPublicKey: any, amountBananos: any): any;

    export function camoNanoSendWithdrawalFromSeed(seed: any, seedIx: any, toAccount: any, amountBananos: any): any;

    export function changeBananoRepresentativeForSeed(seed: any, seedIx: any, representative: any): any;

    export function changeNanoRepresentativeForSeed(seed: any, seedIx: any, representative: any): any;

    export function getAccount(publicKey: any, accountPrefix: any): any;

    export function getAccountBalanceAndPendingRaw(account: any): any;

    export function getAccountBalanceRaw(account: any): any;

    export function getAccountHistory(account: any, count: any, head: any, raw: any): any;

    export function getAccountInfo(account: any, representativeFlag: any): any;

    export function getAccountPublicKey(account: any): any;

    export function getAccountsBalances(accounts: any): any;

    export function getAccountsPending(accounts: any, count: any, source: any): any;

    export function getBananoAccount(publicKey: any): any;

    export function getBananoAccountFromSeed(seed: any, seedIx: any): any;

    export function getBananoAccountValidationInfo(account: any): any;

    export function getBananoDecimalAmountAsRaw(amount: any): any;

    export function getBananoPartsAsDecimal(bananoParts: any): any;

    export function getBananoPartsDescription(bananoParts: any): any;

    export function getBananoPartsFromDecimal(decimalAmount: any): any;

    export function getBananoPartsFromRaw(amountRawStr: any): any;

    export function getBlockCount(): any;

    export function getBlockHash(block: any): any;

    export function getBytesFromHex(hex: any): any;

    export function getCamoAccount(camoPublicKey: any): any;

    export function getCamoAccountValidationInfo(account: any): any;

    export function getCamoBananoAccountBalanceRaw(toPrivateKey: any, fromPublicKey: any): any;

    export function getCamoBananoNextPrivateKeyForReceive(seed: any): any;

    export function getCamoBananoSharedAccountData(seed: any, seedIx: any, account: any, sharedSeedIx: any): any;

    export function getCamoNanoAccountBalanceRaw(toPrivateKey: any, fromPublicKey: any): any;

    export function getCamoNanoNextPrivateKeyForReceive(seed: any): any;

    export function getCamoNanoSharedAccountData(seed: any, seedIx: any, account: any, sharedSeedIx: any): any;

    export function getCamoPublicKey(privateKey: any): any;

    export function getHexFromBytes(bytes: any): any;

    export function getNanoAccount(publicKey: any): any;

    export function getNanoAccountFromSeed(seed: any, seedIx: any): any;

    export function getNanoAccountValidationInfo(account: any): any;

    export function getNanoPartsFromRaw(amountRawStr: any): any;

    export function getPrivateKey(seed: any, seedIx: any): any;

    export function getPublicKey(privateKey: any): any;

    export function getRawStrFromBananoStr(amountStr: any): any;

    export function getRawStrFromBanoshiStr(amountStr: any): any;

    export function getRawStrFromNanoStr(amountStr: any): any;

    export function getRawStrFromNanoshiStr(amountStr: any): any;

    export function getSharedSecret(privateKey: any, publicKey: any): any;

    export function getSignature(privateKey: any, block: any): any;

    export function getWorkUsingCpu(hash: any, workBytes: any): any;

    export function getZeroedWorkBytes(): any;

    export function isWorkValid(hashBytes: any, workBytes: any): any;

    export function openBananoAccountFromSeed(seed: any, seedIx: any, representative: any, pendingBlockHash: any, pendingValueRaw: any): any;

    export function openNanoAccountFromSeed(seed: any, seedIx: any, representative: any, pendingBlockHash: any, pendingValueRaw: any): any;

    export function receiveBananoDepositsForSeed(seed: any, seedIx: any, representative: any, specificPendingBlockHash: any): any;

    export function receiveCamoBananoDepositsForSeed(seed: any, seedIx: any, account: any, sharedSeedIx: any, specificPendingBlockHash: any): any;

    export function receiveCamoNanoDepositsForSeed(seed: any, seedIx: any, account: any, sharedSeedIx: any, specificPendingBlockHash: any): any;

    export function receiveNanoDepositsForSeed(seed: any, seedIx: any, representative: any, specificPendingBlockHash: any): any;

    export function sendAmountToBananoAccount(seed: any, seedIx: any, destAccount: any, amountRaw: any, successCallback: any, failureCallback: any): any;

    export function sendAmountToBananoAccountWithRepresentativeAndPrevious(seed: any, seedIx: any, destAccount: any, amountRaw: any, representative: any, previousHash: any): any;

    export function sendAmountToNanoAccount(seed: any, seedIx: any, destAccount: any, amountRaw: any, successCallback: any, failureCallback: any): any;

    export function sendAmountToNanoAccountWithRepresentativeAndPrevious(seed: any, seedIx: any, destAccount: any, amountRaw: any, representative: any, previousHash: any): any;

    export function sendBananoWithdrawalFromSeed(seed: any, seedIx: any, toAccount: any, amountBananos: any, representative: any, previous: any): any;

    export function sendNanoWithdrawalFromSeed(seed: any, seedIx: any, toAccount: any, amountBananos: any, representative: any, previous: any): any;

    export function setAuth(auth: any): void;

    export function setBananodeApi(_bananodeApi: any): void;

    export function setBananodeApiUrl(url: any): void;

    export function signHash(privateKey: any, hash: any): any;

    export function verify(hash: any, signature: any, publicKey: any): any;

    export namespace bananoUtil {
        function bytesToHex(bytes: any): any;

        function change(bananodeApi: any, privateKey: any, representative: any, accountPrefix: any): any;

        function decToHex(decValue: any, bytes: any): any;

        function getAccount(publicKey: any, accountPrefix: any): any;

        function getAccountPublicKey(account: any): any;

        function getAccountSuffix(publicKey: any): any;

        function getAmountPartsFromRaw(amountRawStr: any, amountPrefix: any): any;

        function getBananoAccountValidationInfo(account: any): any;

        function getHashCPUWorker(hash: any, workBytes: any): any;

        function getNanoAccountValidationInfo(account: any): any;

        function getPrivateKey(seed: any, seedIx: any): any;

        function getPublicKey(privateKey: any): any;

        function getRawStrFromMajorAmountStr(amountStr: any, amountPrefix: any): any;

        function getRawStrFromMinorAmountStr(amountStr: any, amountPrefix: any): any;

        function getZeroedWorkBytes(): any;

        function hash(block: any): any;

        function hexToBytes(hex: any): any;

        function incrementBytes(bytes: any): void;

        function isAccountOpen(bananodeApi: any, account: any): any;

        function isAccountSuffixValid(accountSuffix: any): any;

        function isSeedValid(seed: any): any;

        function isWorkValid(hashBytes: any, workBytes: any): any;

        function open(bananodeApi: any, privateKey: any, publicKey: any, representative: any, pending: any, pendingValueRaw: any, accountPrefix: any): any;

        function receive(bananodeApi: any, privateKey: any, publicKey: any, representative: any, previous: any, hash: any, valueRaw: any, accountPrefix: any): any;

        function send(bananodeApi: any, seed: any, seedIx: any, destAccount: any, amountRaw: any, successCallback: any, failureCallback: any, accountPrefix: any): void;

        function sendFromPrivateKey(bananodeApi: any, privateKey: any, destAccount: any, amountRaw: any, accountPrefix: any): any;

        function sendFromPrivateKeyWithRepresentative(bananodeApi: any, privateKey: any, destAccount: any, amountRaw: any, newRepresentative: any, accountPrefix: any): any;

        function sendFromPrivateKeyWithRepresentativeAndPrevious(bananodeApi: any, privateKey: any, destAccount: any, amountRaw: any, newRepresentative: any, newPrevious: any, accountPrefix: any): any;

        function sign(privateKey: any, block: any): any;

        function signHash(privateKey: any, hash: any): any;

        function verify(hash: any, signature: any, publicKey: any): any;

    }

    export namespace bananodeApi {
        function getAccountBalanceAndPendingRaw(account: any): any;

        function getAccountBalanceRaw(account: any): any;

        function getAccountHistory(account: any, count: any, head: any, raw: any): any;

        function getAccountInfo(account: any, representativeFlag: any): any;

        function getAccountRepresentative(account: any): any;

        function getAccountsBalances(accounts: any): any;

        function getAccountsPending(accounts: any, count: any, source: any): any;

        function getBlockAccount(hash: any): any;

        function getBlockCount(): any;

        function getBlocks(hashes: any, jsonBlock: any): any;

        function getFrontiers(account: any, count: any): any;

        function getGeneratedWork(hash: any): any;

        function getPrevious(account: any): any;

        function log(): any;

        function process(block: any, subtype: any): any;

        function sendRequest(formData: any): any;

        function setAuth(authString: any): void;

        function setLogRequestErrors(newLogRequestErrors: any): void;

        function setModuleRef(newModuleRef: any): void;

        function setUrl(newUrl: any): void;

        function trace(): any;

    }

    export namespace camoUtil {
        function getAccountsPending(bananodeApi: any, toPrivateKey: any, fromPublicKey: any, sharedSeedIx: any, count: any, amountPrefix: any): any;

        function getBalanceRaw(bananodeApi: any, toPrivateKey: any, fromPublicKey: any, amountPrefix: any): any;

        function getCamoAccount(camoPublicKey: any): any;

        function getCamoPublicKey(privateKey: any): any;

        function getCamoPublicKeyBytes(privateKeyBytes: any): any;

        function getFirstUnopenedPrivateKey(bananodeApi: any, seed: any, amountPrefix: any): any;

        function getSharedAccountData(bananodeApi: any, privateKey: any, publicKey: any, sharedSeedIx: any, amountPrefix: any): any;

        function getSharedSecret(privateKey: any, publicKey: any): any;

        function getSharedSecretBytes(privateKeyBytes: any, publicKeyBytes: any): any;

        function getSharedSecretFromRepresentative(bananodeApi: any, toPrivateKey: any, fromPublicKey: any, amountPrefix: any): any;

        function isCamoAccountValid(camoAccount: any): any;

        function receive(bananodeApi: any, toPrivateKey: any, fromPublicKey: any, amountPrefix: any): any;

        function receiveBlock(bananodeApi: any, isAccountOpenFlag: any, account: any, privateKey: any, publicKey: any, representative: any, pendingBlockHash: any, pendingValueRaw: any, amountPrefix: any): any;

        function receiveSeed(bananodeApi: any, seed: any, amountPrefix: any): any;

        function send(bananodeApi: any, fundingPrivateKey: any, fromPrivateKey: any, toPublicKey: any, amountRaw: any, amountPrefix: any): any;

    }

    export namespace depositUtil {
        function receive(loggingUtil: any, bananodeApi: any, account: any, privateKey: any, representative: any, specificPendingBlockHash: any, accountPrefix: any): any;

    }

    export namespace loggingUtil {
        function log(): any;

        function trace(): any;

    }

    export namespace realBananodeApi {
        function getAccountBalanceAndPendingRaw(account: any): any;

        function getAccountBalanceRaw(account: any): any;

        function getAccountHistory(account: any, count: any, head: any, raw: any): any;

        function getAccountInfo(account: any, representativeFlag: any): any;

        function getAccountRepresentative(account: any): any;

        function getAccountsBalances(accounts: any): any;

        function getAccountsPending(accounts: any, count: any, source: any): any;

        function getBlockAccount(hash: any): any;

        function getBlockCount(): any;

        function getBlocks(hashes: any, jsonBlock: any): any;

        function getFrontiers(account: any, count: any): any;

        function getGeneratedWork(hash: any): any;

        function getPrevious(account: any): any;

        function log(): any;

        function process(block: any, subtype: any): any;

        function sendRequest(formData: any): any;

        function setAuth(authString: any): void;

        function setLogRequestErrors(newLogRequestErrors: any): void;

        function setModuleRef(newModuleRef: any): void;

        function setUrl(newUrl: any): void;

        function trace(): any;

    }

    export namespace withdrawUtil {
        function withdraw(loggingUtil: any, bananodeApi: any, privateKey: any, toAccount: any, amountBananos: any, accountPrefix: any, representative: any, previous: any): any;

    }

}